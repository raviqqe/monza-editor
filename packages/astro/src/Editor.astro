---
import "monza-editor/style.css";
import { styles } from "monza-editor";
import type { BundledLanguage, BundledTheme } from "shiki";

interface Props {
  class?: string;
  id?: string;
  language: BundledLanguage;
  theme: BundledTheme;
  darkTheme?: BundledTheme;
  value?: string;
}

const { id, language, theme, darkTheme, value, ...props } = Astro.props;
---

<monza-editor
  data-language={language}
  data-theme={theme}
  data-dark-theme={darkTheme}
  data-value={value}
>
  <div class={`${styles.main} ${props.class}`} id={id}>
    <textarea class={styles.textarea} value={value}></textarea>
    <pre class={styles.pre}><code class={styles.code} /></pre>
  </div>
</monza-editor>
<script>
  import { initialize } from "monza-editor";
  import {
    createHighlighter,
    type BundledLanguage,
    type BundledTheme,
  } from "shiki";

  const highlighter = await createHighlighter({ langs: [], themes: [] });

  class Editor extends HTMLElement {
    async connectedCallback(): Promise<void> {
      const { language, theme, darkTheme, value } = this.dataset;

      if (!language || !theme) {
        throw new Error("Editor props missing");
      }

      const div = this.querySelector("div");
      const textarea = this.querySelector("textarea");
      const pre = this.querySelector("pre");
      const code = this.querySelector("code");

      if (!div || !textarea || !pre || !code) {
        throw new Error("Editor elements missing");
      }

      await highlighter.loadLanguage(language as BundledLanguage);

      for (const name of [theme, darkTheme]) {
        if (name) {
          await highlighter.loadTheme(name as BundledTheme);
        }
      }

      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

      let dark = mediaQuery.matches;

      mediaQuery.addEventListener("change", (event) => (dark = event.matches));

      initialize({
        code,
        highlight: (text) =>
          highlighter.codeToHtml(text, {
            lang: language,
            structure: "inline",
            theme: (dark && darkTheme) || theme,
          }),
        pre,
        textarea,
        value,
      });
    }
  }

  customElements.define("monza-editor", Editor);
</script>
